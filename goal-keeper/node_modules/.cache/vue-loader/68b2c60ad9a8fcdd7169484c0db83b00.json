{"remainingRequest":"/Users/danny/fullstack-projects/goal-keeper-project/goal-keeper/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/danny/fullstack-projects/goal-keeper-project/goal-keeper/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/danny/fullstack-projects/goal-keeper-project/goal-keeper/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/danny/fullstack-projects/goal-keeper-project/goal-keeper/src/components/wizard/PlayerWizard.vue?vue&type=template&id=217f0c10&scoped=true&","dependencies":[{"path":"/Users/danny/fullstack-projects/goal-keeper-project/goal-keeper/src/components/wizard/PlayerWizard.vue","mtime":1627847928282},{"path":"/Users/danny/fullstack-projects/goal-keeper-project/goal-keeper/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/danny/fullstack-projects/goal-keeper-project/goal-keeper/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/danny/fullstack-projects/goal-keeper-project/goal-keeper/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/danny/fullstack-projects/goal-keeper-project/goal-keeper/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}