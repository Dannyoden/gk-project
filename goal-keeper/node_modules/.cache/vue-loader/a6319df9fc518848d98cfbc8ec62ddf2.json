{"remainingRequest":"/Users/danny/fullstack-projects/goal-keeper-project/goal-keeper/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/danny/fullstack-projects/goal-keeper-project/goal-keeper/src/components/common/InputField.vue?vue&type=style&index=0&id=78d21f98&scoped=true&lang=scss&","dependencies":[{"path":"/Users/danny/fullstack-projects/goal-keeper-project/goal-keeper/src/components/common/InputField.vue","mtime":1627847928274},{"path":"/Users/danny/fullstack-projects/goal-keeper-project/goal-keeper/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/danny/fullstack-projects/goal-keeper-project/goal-keeper/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/danny/fullstack-projects/goal-keeper-project/goal-keeper/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/danny/fullstack-projects/goal-keeper-project/goal-keeper/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/danny/fullstack-projects/goal-keeper-project/goal-keeper/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/danny/fullstack-projects/goal-keeper-project/goal-keeper/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoudGV4dGFyZWEsIC5pbnB1dHsKICBib3gtc2hhZG93OiBpbnNldCAwIDAuMDYyNWVtIDAuMTI1ZW0gcmdiKDEwIDEwIDEwIC8gNSUpOwogIG1heC13aWR0aDogMTAwJTsKICB3aWR0aDogMTAwJTsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjMWYxZjFmOwogIGNvbG9yOiB3aGl0ZXNtb2tlOwp9Cgo6OnBsYWNlaG9sZGVyIHsKICBjb2xvcjogZ3JleTsKfQoKLmhhcy10ZXh0LXdlaWdodC1ib2xkIHsKICBjb2xvcjogd2hpdGVzbW9rZTsKfQoK"},{"version":3,"sources":["InputField.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgFA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA","file":"InputField.vue","sourceRoot":"src/components/common","sourcesContent":["<template>\n    <div class=\"field has-text-left\">\n        <label class=\"has-text-weight-bold\" v-if=\"label\">{{this.label}}</label>\n        <div class=\"control\"\n            :class=\"iconPosition\">\n            <input :class=\"className\" :type=\"type\" :placeholder=\"placeHolder\" v-model=\"input\" :autocomplete=\"autoCompleteSetting\">\n            <span v-if=\"iconData\"\n                  class=\"icon is-small\"\n                  :class=\"alignIcon\">\n                <i :class=\"icon\"></i>\n            </span>\n        </div>\n    </div>\n</template>\n\n<script lang=\"ts\">\n\nimport { Prop, Vue, Component, Watch } from 'vue-property-decorator';\nimport {IconInputField} from '@/components/common/IconInputField';\n\n@Component\nexport default class InputField extends Vue {\n    @Prop({ default : ''}) private type!: string;\n    @Prop({ default : ''}) private placeHolder!: string;\n    @Prop({ default : ''}) private className!: string;\n    @Prop({ default : undefined}) private iconData: IconInputField | undefined;\n    @Prop({ default : undefined}) private label: string | undefined;\n    @Prop({ default : undefined}) private inputValue: string | undefined;\n    @Prop({ default : 'off'}) private autoCompleteSetting!: string;\n\n    private inputStringValue: string = '';\n\n    @Watch('inputStringValue')\n    public returnValue(): void {\n        this.$emit('inputChanged', this.inputStringValue);\n    }\n\n    get iconPosition() {\n        if (!this.iconData?.position) {\n            return '';\n        }\n        if (this.iconData.position === 'left') {\n            return 'has-icons-left';\n        }\n        if (this.iconData.position === 'right') {\n            return 'has-icons-right';\n        }\n        console.error('Position of icon is not valid');\n        return;\n    }\n\n    get alignIcon() {\n        if (!this.iconData?.position) {\n            return '';\n        }\n        if (this.iconData.position === 'left') {\n            return 'is-left';\n        }\n        if (this.iconData.position === 'right') {\n            return 'is-right';\n        }\n    }\n\n    get icon() {\n        return this.iconData!.icon;\n    }\n\n    get input() {\n        return this.inputValue ? this.inputValue : '';\n    }\n\n    set input(newInput: string) {\n        this.inputStringValue = newInput;\n    }\n\n}\n</script>\n\n<style scoped lang=\"scss\">\n\n.textarea, .input{\n  box-shadow: inset 0 0.0625em 0.125em rgb(10 10 10 / 5%);\n  max-width: 100%;\n  width: 100%;\n  background-color: #1f1f1f;\n  color: whitesmoke;\n}\n\n::placeholder {\n  color: grey;\n}\n\n.has-text-weight-bold {\n  color: whitesmoke;\n}\n\n</style>\n"]}]}