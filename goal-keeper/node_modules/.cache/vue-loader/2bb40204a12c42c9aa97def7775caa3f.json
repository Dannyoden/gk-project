{"remainingRequest":"/Users/danny/fullstack-projects/goal-keeper-project/goal-keeper/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/danny/fullstack-projects/goal-keeper-project/goal-keeper/src/components/sessions/game/SessionGameConsole.vue?vue&type=style&index=0&id=46a6e4ec&scoped=true&lang=scss&","dependencies":[{"path":"/Users/danny/fullstack-projects/goal-keeper-project/goal-keeper/src/components/sessions/game/SessionGameConsole.vue","mtime":1616765187056},{"path":"/Users/danny/fullstack-projects/goal-keeper-project/goal-keeper/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/danny/fullstack-projects/goal-keeper-project/goal-keeper/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/danny/fullstack-projects/goal-keeper-project/goal-keeper/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/danny/fullstack-projects/goal-keeper-project/goal-keeper/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/danny/fullstack-projects/goal-keeper-project/goal-keeper/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/danny/fullstack-projects/goal-keeper-project/goal-keeper/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgojY29udGVudCA+IGRpdiB7CiAgICBkaXNwbGF5OiBmbGV4OwogICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7CiAgICBhbGlnbi1zZWxmOiBjZW50ZXI7Cn0KCiNjb250ZW50ID4gZGl2ID4gc3BhbiB7CiAgICBtYXJnaW4tbGVmdDogNXB4Owp9Cgojd3JhcHBlci1zdGFydC1idXR0b24gI3N0YXJ0LWJ1dHRvbiB7CiAgICB3aWR0aDogMTAwJTsKfQoKLnRlYW0tbmFtZSB7CiAgZm9udC1zaXplOiAxcmVtOwp9CgoK"},{"version":3,"sources":["SessionGameConsole.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+IA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA","file":"SessionGameConsole.vue","sourceRoot":"src/components/sessions/game","sourcesContent":["<template>\n    <div class=\"box\">\n        <div class=\"columns is-multiline is-mobile\"\n             id=\"content\">\n            <div class=\"column is-one-quarter is-size-5 has-text-centered\">\n                <p class=\"team-name\"> {{ this.FIRST_TEAM }} </p>\n            </div>\n            <div class=\"column is-half\">\n                <span> {{ this.showMinutes }} : </span>\n                <span> {{ this.showSeconds }} : </span>\n                <span> {{ this.showMilliSeconds }}</span>\n            </div>\n            <div class=\"column is-one-quarter is-size-5 has-text-centered\">\n                <p class=\"team-name\"> {{ this.SECOND_TEAM }} </p>\n            </div>\n            <div class=\"column is-one-quarter is-size-3\">\n                <p> {{ this.firstTeamScore }}</p>\n            </div>\n            <div\n                class=\"column is-half\"\n                id=\"wrapper-start-button\">\n                <button\n                    class=\"button\"\n                    :class=\"{\n                        'is-info': !timerIsActive,\n                        'is-danger': timerIsActive && !gameIsFinished,\n                        'is-primary': gameIsFinished }\"\n                    id=\"start-button\"\n                    @click=\"this.handleTimer\">\n                    <span> {{ this.buttonMessage }} </span>\n                </button>\n            </div>\n            <div\n                class=\"column is-one-quarter is-size-3\">\n                <p> {{ this.secondTeamScore }} </p>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script lang=\"ts\">\nimport {Component, Vue, Prop, Emit} from 'vue-property-decorator';\nimport NoSleep from 'nosleep.js';\n\n@Component\nexport default class SessionGameConsole extends Vue {\n    @Prop() private timeInMinutes!: number;\n    @Prop() private firstTeamScore!: number;\n    @Prop() private secondTeamScore!: number;\n\n    private readonly FIRST_TEAM = 'Team One';\n    private readonly SECOND_TEAM = 'Team Two';\n\n    seconds: number = 0;\n    minutes: number = this.timeInMinutes;\n    milliSeconds: number = 0;\n    timerIsActive: boolean = false;\n    timer: number | undefined = undefined;\n    buttonMessage: string = SessionGameConsole.START_MESSAGE;\n    noSleep = new NoSleep();\n\n    static START_MESSAGE = 'Start';\n    static PAUSE_MESSAGE = 'Pause';\n    static FINISH_SESSION_MESSAGE = 'Finish';\n\n    @Emit('show-finish-game-pop-up')\n    showFinishGamePopUp() {\n        return true;\n    }\n\n    get gameIsFinished() {\n        return this.minutes === 0 && this.seconds === 0 && this.milliSeconds === 0;\n    }\n\n    get showMinutes(): number {\n        return this.minutes;\n    }\n\n    get showSeconds(): number | string {\n        return this.seconds >= 10 ? this.seconds : String(this.seconds).padStart(2, '0');\n    }\n\n    get showMilliSeconds(): string {\n        return this.milliSeconds === 1000 ?\n                    String(this.milliSeconds).slice(0, -2) :\n                    this.milliSeconds >= 10 ?\n                        String(this.milliSeconds / 10).padStart(2, '0') :\n                        String(this.milliSeconds).padStart(2, '0');\n    }\n\n    private handleTimer() {\n        if (this.gameIsFinished) {\n            this.showFinishGamePopUp();\n            return;\n        }\n\n        if (this.timerIsActive) {\n            this.stopTimer();\n            this.timerIsActive = false;\n            this.buttonMessage = SessionGameConsole.START_MESSAGE;\n        } else {\n            this.startTimer();\n            this.timerIsActive = true;\n            this.buttonMessage = SessionGameConsole.PAUSE_MESSAGE;\n        }\n    }\n\n    private startTimer() {\n        this.timer = setInterval(() => {\n            if (this.minutes === 0 && this.seconds === 0 && this.milliSeconds === 0) {\n                this.stopTimer();\n                this.buttonMessage = SessionGameConsole.FINISH_SESSION_MESSAGE;\n            } else if (this.seconds === 0 && this.milliSeconds === 0) {\n                this.minutes--;\n                this.seconds = 59;\n                this.milliSeconds = 1000;\n            } else if (this.milliSeconds === 0) {\n                this.seconds--;\n                this.milliSeconds = 1000;\n            } else {\n                this.milliSeconds -= 10;\n            }\n        }, 10);\n        this.noSleep!.enable();\n    }\n\n    private stopTimer() {\n        clearInterval(this.timer);\n        this.noSleep.disable();\n    }\n\n    beforeDestroy() {\n        if (this.timer) {\n            this.timer = undefined;\n        }\n        this.noSleep.disable();\n    }\n\n}\n</script>\n\n<style scoped lang=\"scss\">\n\n#content > div {\n    display: flex;\n    justify-content: center;\n    align-self: center;\n}\n\n#content > div > span {\n    margin-left: 5px;\n}\n\n#wrapper-start-button #start-button {\n    width: 100%;\n}\n\n.team-name {\n  font-size: 1rem;\n}\n\n\n</style>\n"]}]}