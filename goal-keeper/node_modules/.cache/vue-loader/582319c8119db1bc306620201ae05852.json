{"remainingRequest":"/Users/danny/fullstack-projects/goal-keeper-project/goal-keeper/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/danny/fullstack-projects/goal-keeper-project/goal-keeper/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/danny/fullstack-projects/goal-keeper-project/goal-keeper/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/danny/fullstack-projects/goal-keeper-project/goal-keeper/src/components/accessmanagement/Register.vue?vue&type=template&id=7c5029cb&scoped=true&","dependencies":[{"path":"/Users/danny/fullstack-projects/goal-keeper-project/goal-keeper/src/components/accessmanagement/Register.vue","mtime":1618417239498},{"path":"/Users/danny/fullstack-projects/goal-keeper-project/goal-keeper/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/danny/fullstack-projects/goal-keeper-project/goal-keeper/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/danny/fullstack-projects/goal-keeper-project/goal-keeper/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/danny/fullstack-projects/goal-keeper-project/goal-keeper/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sdW1ucyBpcy12Y2VudGVyZWQiIH0sIFsKICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibG9naW4gY29sdW1uIGlzLTQgIiB9LCBbCiAgICAgIF9jKCJzZWN0aW9uIiwgeyBzdGF0aWNDbGFzczogInNlY3Rpb24iIH0sIFsKICAgICAgICBfdm0uX20oMCksCiAgICAgICAgIV92bS5zdWNjZXNzZnVsCiAgICAgICAgICA/IF9jKAogICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJtdC02IiB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF92bS5tZXNzYWdlLmxlbmd0aCA+IDAKICAgICAgICAgICAgICAgICAgPyBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJoZWxwIGlzLWRhbmdlciIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KF92bS5fcyhfdm0ubWVzc2FnZSkpCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgOiBfdm0uX2UoKSwKICAgICAgICAgICAgICAgICFfdm0udXNlcm5hbWVWYWxpZAogICAgICAgICAgICAgICAgICA/IF9jKCJwIiwgeyBzdGF0aWNDbGFzczogImhlbHAgaXMtZGFuZ2VyIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIlBsZWFzZSBlbnRlciBhIHZhbGlkIHVzZXJuYW1lIikKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICA6IF92bS5fZSgpLAogICAgICAgICAgICAgICAgX2MoIklucHV0RmllbGQiLCB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgImNsYXNzLW5hbWUiOiAiaW5wdXQgaXMtcHJpbWFyeSIsCiAgICAgICAgICAgICAgICAgICAgdHlwZTogInRleHQiLAogICAgICAgICAgICAgICAgICAgICJwbGFjZS1ob2xkZXIiOiAiVXNlcm5hbWUiLAogICAgICAgICAgICAgICAgICAgIGljb25EYXRhOiB7IGljb246ICJmYXMgZmEtdXNlciIsIHBvc2l0aW9uOiAibGVmdCIgfSwKICAgICAgICAgICAgICAgICAgICAiaW5wdXQtdmFsdWUiOiBfdm0udXNlci51c2VybmFtZQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBvbjogeyBpbnB1dENoYW5nZWQ6IF92bS5zZXRVc2VybmFtZSB9CiAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICFfdm0uZmlyc3ROYW1lVmFsaWQKICAgICAgICAgICAgICAgICAgPyBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJoZWxwIGlzLWRhbmdlciIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJQbGVhc2UgZW50ZXIgYSB2YWxpZCBmaXJzdCBuYW1lIikKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICA6IF92bS5fZSgpLAogICAgICAgICAgICAgICAgX2MoIklucHV0RmllbGQiLCB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgImNsYXNzLW5hbWUiOiAiaW5wdXQgaXMtcHJpbWFyeSIsCiAgICAgICAgICAgICAgICAgICAgdHlwZTogInRleHQiLAogICAgICAgICAgICAgICAgICAgICJwbGFjZS1ob2xkZXIiOiAiZmlyc3QgbmFtZSIsCiAgICAgICAgICAgICAgICAgICAgaWNvbkRhdGE6IHsgaWNvbjogImZhcyBmYS11c2VyIiwgcG9zaXRpb246ICJsZWZ0IiB9LAogICAgICAgICAgICAgICAgICAgICJpbnB1dC12YWx1ZSI6IF92bS51c2VyLmZpcnN0TmFtZQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBvbjogeyBpbnB1dENoYW5nZWQ6IF92bS5zZXRGaXJzdE5hbWUgfQogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAhX3ZtLmxhc3ROYW1lVmFsaWQKICAgICAgICAgICAgICAgICAgPyBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJoZWxwIGlzLWRhbmdlciIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJQbGVhc2UgZW50ZXIgYSB2YWxpZCBsYXN0IG5hbWUiKQogICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgIDogX3ZtLl9lKCksCiAgICAgICAgICAgICAgICBfYygiSW5wdXRGaWVsZCIsIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAiY2xhc3MtbmFtZSI6ICJpbnB1dCBpcy1wcmltYXJ5IiwKICAgICAgICAgICAgICAgICAgICB0eXBlOiAidGV4dCIsCiAgICAgICAgICAgICAgICAgICAgInBsYWNlLWhvbGRlciI6ICJsYXN0IG5hbWUiLAogICAgICAgICAgICAgICAgICAgIGljb25EYXRhOiB7IGljb246ICJmYXMgZmEtdXNlciIsIHBvc2l0aW9uOiAibGVmdCIgfSwKICAgICAgICAgICAgICAgICAgICAiaW5wdXQtdmFsdWUiOiBfdm0udXNlci5sYXN0TmFtZQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBvbjogeyBpbnB1dENoYW5nZWQ6IF92bS5zZXRMYXN0TmFtZSB9CiAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICFfdm0uZW1haWxWYWxpZAogICAgICAgICAgICAgICAgICA/IF9jKCJwIiwgeyBzdGF0aWNDbGFzczogImhlbHAgaXMtZGFuZ2VyIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIlBsZWFzZSBlbnRlciBhbiBlbWFpbCIpCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgOiBfdm0uX2UoKSwKICAgICAgICAgICAgICAgIF9jKCJJbnB1dEZpZWxkIiwgewogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICJjbGFzcy1uYW1lIjogImlucHV0IGlzLXByaW1hcnkiLAogICAgICAgICAgICAgICAgICAgIHR5cGU6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgICAicGxhY2UtaG9sZGVyIjogImVtYWlsIiwKICAgICAgICAgICAgICAgICAgICBpY29uRGF0YTogeyBpY29uOiAiZmFzIGZhLXVzZXIiLCBwb3NpdGlvbjogImxlZnQiIH0sCiAgICAgICAgICAgICAgICAgICAgImlucHV0LXZhbHVlIjogX3ZtLnVzZXIuZW1haWwKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgb246IHsgaW5wdXRDaGFuZ2VkOiBfdm0uc2V0RW1haWwgfQogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAhX3ZtLmVtYWlsVW5pcXVlCiAgICAgICAgICAgICAgICAgID8gX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAiaGVscCBpcy1kYW5nZXIiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiUGxlYXNlIG1ha2Ugc3VyZSBib3RoIGVtYWlscyBtYXRjaCIpCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgOiBfdm0uX2UoKSwKICAgICAgICAgICAgICAgIF9jKCJJbnB1dEZpZWxkIiwgewogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICJjbGFzcy1uYW1lIjogImlucHV0IGlzLXByaW1hcnkiLAogICAgICAgICAgICAgICAgICAgIHR5cGU6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgICAicGxhY2UtaG9sZGVyIjogImNvbmZpcm0gZW1haWwiLAogICAgICAgICAgICAgICAgICAgIGljb25EYXRhOiB7IGljb246ICJmYXMgZmEtdXNlciIsIHBvc2l0aW9uOiAibGVmdCIgfSwKICAgICAgICAgICAgICAgICAgICAiaW5wdXQtdmFsdWUiOiBfdm0uc2Vjb25kYXJ5RW1haWwKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgb246IHsgaW5wdXRDaGFuZ2VkOiBfdm0uc2V0U2Vjb25kYXJ5RW1haWwgfQogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAhX3ZtLnBhc3N3b3JkVmFsaWQKICAgICAgICAgICAgICAgICAgPyBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJoZWxwIGlzLWRhbmdlciIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJQbGVhc2UgZW50ZXIgYSB2YWxpZCBwYXNzd29yZCIpCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgOiBfdm0uX2UoKSwKICAgICAgICAgICAgICAgIF9jKCJJbnB1dEZpZWxkIiwgewogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICJjbGFzcy1uYW1lIjogImlucHV0IGlzLXByaW1hcnkiLAogICAgICAgICAgICAgICAgICAgIHR5cGU6ICJwYXNzd29yZCIsCiAgICAgICAgICAgICAgICAgICAgInBsYWNlLWhvbGRlciI6ICJwYXNzd29yZCIsCiAgICAgICAgICAgICAgICAgICAgaWNvbkRhdGE6IHsgaWNvbjogImZhIGZhLWtleSIsIHBvc2l0aW9uOiAibGVmdCIgfSwKICAgICAgICAgICAgICAgICAgICAiaW5wdXQtdmFsdWUiOiBfdm0udXNlci5wYXNzd29yZAogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBvbjogeyBpbnB1dENoYW5nZWQ6IF92bS5zZXRQYXNzd29yZCB9CiAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICFfdm0ucGFzc3dvcmRVbmlxdWUKICAgICAgICAgICAgICAgICAgPyBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJoZWxwIGlzLWRhbmdlciIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJQbGVhc2UgbWFrZSBzdXJlIGJvdGggcGFzc3dvcmRzIG1hdGNoIikKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICA6IF92bS5fZSgpLAogICAgICAgICAgICAgICAgX2MoIklucHV0RmllbGQiLCB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgImNsYXNzLW5hbWUiOiAiaW5wdXQgaXMtcHJpbWFyeSIsCiAgICAgICAgICAgICAgICAgICAgdHlwZTogInBhc3N3b3JkIiwKICAgICAgICAgICAgICAgICAgICAicGxhY2UtaG9sZGVyIjogImNvbmZpcm0gcGFzc3dvcmQiLAogICAgICAgICAgICAgICAgICAgIGljb25EYXRhOiB7IGljb246ICJmYSBmYS1rZXkiLCBwb3NpdGlvbjogImxlZnQiIH0sCiAgICAgICAgICAgICAgICAgICAgImlucHV0LXZhbHVlIjogX3ZtLnNlY29uZGFyeVBhc3N3b3JkCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIG9uOiB7IGlucHV0Q2hhbmdlZDogX3ZtLnNldFNlY29uZGFyeVBhc3N3b3JkIH0KICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJoYXMtdGV4dC1jZW50ZXJlZCIgfSwgWwogICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJidXR0b24gaXMtY2VudGVyZWQgaXMtcHJpbWFyeSBpcy1vdXRsaW5lZCIsCiAgICAgICAgICAgICAgICAgICAgICBvbjogeyBjbGljazogX3ZtLmhhbmRsZVJlZ2lzdGVyIH0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIkNyZWF0ZSBhY2NvdW50IildCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICkKICAgICAgICAgIDogX3ZtLl9lKCkKICAgICAgXSksCiAgICAgIF9jKCJzZWN0aW9uIiwgWwogICAgICAgIF92bS5zdWNjZXNzZnVsCiAgICAgICAgICA/IF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiaGFzLXRleHQtY2VudGVyZWQiIH0sIFsKICAgICAgICAgICAgICBfdm0uX20oMSksCiAgICAgICAgICAgICAgX2MoImgyIiwgeyBzdGF0aWNDbGFzczogInN1YnRpdGxlIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIlN1Y2NlcyEgV2VsY29tZSB0byBHb2FsLWtlZXBlciEiKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiaGFzLXRleHQtY2VudGVyZWQiIH0sIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImJ1dHRvbiBpcy1jZW50ZXJlZCBpcy1wcmltYXJ5IGlzLW91dGxpbmVkIiwKICAgICAgICAgICAgICAgICAgICBvbjogeyBjbGljazogX3ZtLm5hdmlnYXRlVG9Mb2dpbiB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIkdvIHRvIGxvZ2luIildCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIDogX3ZtLl9lKCkKICAgICAgXSkKICAgIF0pLAogICAgX2MoImRpdiIsIHsKICAgICAgc3RhdGljQ2xhc3M6ICJpbnRlcmFjdGl2ZS1iZyBjb2x1bW4gaXMtOCIsCiAgICAgIGF0dHJzOiB7IGlkOiAicGFydGljbGVzLWpzIiB9CiAgICB9KQogIF0pCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFsKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiNCIgfSwgWwogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImhhcy10ZXh0LWNlbnRlcmVkIiB9LCBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vLi4vYXNzZXRzL2ltYWdlcy9sb2dvX2dvYWxrZWVwZXJfd2hpdGUucG5nIiksCiAgICAgICAgICAgIHdpZHRoOiAiMjUwIiwKICAgICAgICAgICAgYWx0OiAiIgogICAgICAgICAgfQogICAgICAgIH0pCiAgICAgIF0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJpY29uIGlzLWxhcmdlIiB9LCBbCiAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogImZhLXN0YWNrIGZhLWxnIiB9LCBbCiAgICAgICAgX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAiZmFzIGZhLWNoZWNrIiB9KQogICAgICBdKQogICAgXSkKICB9Cl0KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}