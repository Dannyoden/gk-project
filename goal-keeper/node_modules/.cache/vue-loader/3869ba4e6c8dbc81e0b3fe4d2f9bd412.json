{"remainingRequest":"/Users/danny/fullstack-projects/goal-keeper-project/goal-keeper/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/danny/fullstack-projects/goal-keeper-project/goal-keeper/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/danny/fullstack-projects/goal-keeper-project/goal-keeper/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/danny/fullstack-projects/goal-keeper-project/goal-keeper/src/components/wizard/PlayerWizard.vue?vue&type=template&id=217f0c10&scoped=true&","dependencies":[{"path":"/Users/danny/fullstack-projects/goal-keeper-project/goal-keeper/src/components/wizard/PlayerWizard.vue","mtime":1616689715708},{"path":"/Users/danny/fullstack-projects/goal-keeper-project/goal-keeper/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/danny/fullstack-projects/goal-keeper-project/goal-keeper/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/danny/fullstack-projects/goal-keeper-project/goal-keeper/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/danny/fullstack-projects/goal-keeper-project/goal-keeper/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgImRpdiIsCiAgICB7IHN0YXRpY0NsYXNzOiAiYm9keSIgfSwKICAgIFsKICAgICAgX2MoIm5hdi1iYXIiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJib3giIH0sIFsKICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJ0YWcgaXMtaW5mbyBpcy1wdWxsZWQtbGVmdCIgfSwgWwogICAgICAgICAgX3ZtLl92KF92bS5fcyhfdm0ubGFiZWwpKQogICAgICAgIF0pLAogICAgICAgIF9jKCJidXR0b24iLCB7CiAgICAgICAgICBzdGF0aWNDbGFzczogImRlbGV0ZSBpcy1wdWxsZWQtcmlnaHQiLAogICAgICAgICAgb246IHsgY2xpY2s6IF92bS5uYXZpZ2F0ZUJhY2sgfQogICAgICAgIH0pLAogICAgICAgIF9jKAogICAgICAgICAgImRpdiIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiY29udGFpbmVyIiB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZpZWxkIiB9LCBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAibGFiZWwiLAogICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogImxhYmVsIiwgYXR0cnM6IHsgZm9yOiAiZ2l2ZW4tbmFtZSIgfSB9LAogICAgICAgICAgICAgICAgW192bS5fdigiIEdpdmVuIG5hbWUgIildCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogImNvbnRyb2wgaGFzLWljb25zLWxlZnQgaGFzLWljb25zLXJpZ2h0IiB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiaW5wdXQiLCB7CiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAibW9kZWwiLAogICAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1tb2RlbCIsCiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0ucGxheWVyLmdpdmVuTmFtZSwKICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogInBsYXllci5naXZlbk5hbWUiCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImlucHV0IGlzLXByaW1hcnkiLAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBpZDogImdpdmVuLW5hbWUiLAogICAgICAgICAgICAgICAgICAgICAgdHlwZTogInRleHQiLAogICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICJlbnRlciBhIGdpdmVuIG5hbWUiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBkb21Qcm9wczogeyB2YWx1ZTogX3ZtLnBsYXllci5naXZlbk5hbWUgfSwKICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgaW5wdXQ6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJGV2ZW50LnRhcmdldC5jb21wb3NpbmcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBfdm0uJHNldChfdm0ucGxheWVyLCAiZ2l2ZW5OYW1lIiwgJGV2ZW50LnRhcmdldC52YWx1ZSkKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICBfdm0uX20oMCkKICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICFfdm0uZ2l2ZW5OYW1lVmFsaWQKICAgICAgICAgICAgICAgID8gX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAiaGVscCBpcy1kYW5nZXIiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiBQbGVhc2UgZW50ZXIgYSB2YWxpZCBnaXZlbiBuYW1lICIpCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICA6IF92bS5fZSgpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZpZWxkIiB9LCBbCiAgICAgICAgICAgICAgX2MoImxhYmVsIiwgeyBzdGF0aWNDbGFzczogImxhYmVsIiwgYXR0cnM6IHsgZm9yOiAic3VybmFtZSIgfSB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIiBTdXJuYW1lICIpCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJjb250cm9sIGhhcy1pY29ucy1sZWZ0IGhhcy1pY29ucy1yaWdodCIgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoImlucHV0IiwgewogICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogIm1vZGVsIiwKICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtbW9kZWwiLAogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLnBsYXllci5zdXJuYW1lLAogICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAicGxheWVyLnN1cm5hbWUiCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImlucHV0IGlzLXByaW1hcnkiLAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBpZDogInN1cm5hbWUiLAogICAgICAgICAgICAgICAgICAgICAgdHlwZTogInRleHQiLAogICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICJlbnRlciBhIHN1cm5hbWUiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBkb21Qcm9wczogeyB2YWx1ZTogX3ZtLnBsYXllci5zdXJuYW1lIH0sCiAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgIGlucHV0OiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRldmVudC50YXJnZXQuY29tcG9zaW5nKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLiRzZXQoX3ZtLnBsYXllciwgInN1cm5hbWUiLCAkZXZlbnQudGFyZ2V0LnZhbHVlKQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgIF92bS5fbSgxKQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgIV92bS5sYXN0bmFtZVZhbGlkCiAgICAgICAgICAgICAgICA/IF9jKCJwIiwgeyBzdGF0aWNDbGFzczogImhlbHAgaXMtZGFuZ2VyIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgUGxlYXNlIGVudGVyIGEgdmFsaWQgc3VybmFtZSAiKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgOiBfdm0uX2UoKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmaWVsZCIgfSwgWwogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImxhYmVsIiwKICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJsYWJlbCIsIGF0dHJzOiB7IGZvcjogInNoaXJ0LW51bWJlciIgfSB9LAogICAgICAgICAgICAgICAgW192bS5fdigiIFNoaXJ0IG51bWJlciAiKV0KICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiY29udHJvbCBoYXMtaWNvbnMtbGVmdCBoYXMtaWNvbnMtcmlnaHQiIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJtb2RlbCIsCiAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LW1vZGVsIiwKICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5wbGF5ZXIuc2hpcnROdW1iZXIsCiAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJwbGF5ZXIuc2hpcnROdW1iZXIiCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImlucHV0IGlzLXByaW1hcnkiLAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBpZDogInNoaXJ0LW51bWJlciIsCiAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAibnVtYmVyIiwKICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAiZW50ZXIgYSBzaGlydCBudW1iZXIiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBkb21Qcm9wczogeyB2YWx1ZTogX3ZtLnBsYXllci5zaGlydE51bWJlciB9LAogICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICBpbnB1dDogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkZXZlbnQudGFyZ2V0LmNvbXBvc2luZykgewogICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIF92bS4kc2V0KF92bS5wbGF5ZXIsICJzaGlydE51bWJlciIsICRldmVudC50YXJnZXQudmFsdWUpCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgX3ZtLl9tKDIpCiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAhX3ZtLnNoaXJ0TnVtYmVySXNWYWxpZAogICAgICAgICAgICAgICAgPyBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJoZWxwIGlzLWRhbmdlciIgfSwgWwogICAgICAgICAgICAgICAgICAgIF92bS5fdigiIFBsZWFzZSBlbnRlciBhIHNoaXJ0IG51bWJlciBiZXR3ZWVuIDEgYW5kIDk5ICIpCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICA6IF92bS5fZSgpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZpZWxkIiB9LCBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAibGFiZWwiLAogICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogImxhYmVsIiwgYXR0cnM6IHsgZm9yOiAicG9zaXRpb24iIH0gfSwKICAgICAgICAgICAgICAgIFtfdm0uX3YoIiBQb3NpdGlvbiAiKV0KICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udHJvbCIgfSwgWwogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJzZWxlY3QgaXMtcHJpbWFyeSIgfSwgWwogICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAic2VsZWN0IiwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAibW9kZWwiLAogICAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LW1vZGVsIiwKICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLnBsYXllci5wb3NpdGlvbiwKICAgICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAicGxheWVyLnBvc2l0aW9uIgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICJwb3NpdGlvbiIgfSwKICAgICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZTogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyICQkc2VsZWN0ZWRWYWwgPSBBcnJheS5wcm90b3R5cGUuZmlsdGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY2FsbCgkZXZlbnQudGFyZ2V0Lm9wdGlvbnMsIGZ1bmN0aW9uKG8pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG8uc2VsZWN0ZWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAubWFwKGZ1bmN0aW9uKG8pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbCA9ICJfdmFsdWUiIGluIG8gPyBvLl92YWx1ZSA6IG8udmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uJHNldCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5wbGF5ZXIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAicG9zaXRpb24iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGV2ZW50LnRhcmdldC5tdWx0aXBsZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/ICQkc2VsZWN0ZWRWYWwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAkJHNlbGVjdGVkVmFsWzBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICBfYygib3B0aW9uIiwgW192bS5fdigiR09BTEtFRVBFUiIpXSksCiAgICAgICAgICAgICAgICAgICAgICBfYygib3B0aW9uIiwgW192bS5fdigiREVGRU5ERVIiKV0pLAogICAgICAgICAgICAgICAgICAgICAgX2MoIm9wdGlvbiIsIFtfdm0uX3YoIk1JREZJRUxERVIiKV0pLAogICAgICAgICAgICAgICAgICAgICAgX2MoIm9wdGlvbiIsIFtfdm0uX3YoIlNUUklLRVIiKV0pCiAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICFfdm0ucG9zaXRpb25WYWxpZAogICAgICAgICAgICAgICAgPyBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJoZWxwIGlzLWRhbmdlciIgfSwgWwogICAgICAgICAgICAgICAgICAgIF92bS5fdigiIFBsZWFzZSBzZWxlY3QgYSBwb3NpdGlvbiAiKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgOiBfdm0uX2UoKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmaWVsZCIgfSwgWwogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImxhYmVsIiwKICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJsYWJlbCIsIGF0dHJzOiB7IGZvcjogInByZWZlcnJlZC1mb290IiB9IH0sCiAgICAgICAgICAgICAgICBbX3ZtLl92KCIgUHJlZmVycmVkIGZvb3QgIildCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRyb2wiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAic2VsZWN0IGlzLXByaW1hcnkiIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgInNlbGVjdCIsCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogIm1vZGVsIiwKICAgICAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1tb2RlbCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5wbGF5ZXIucHJlZmVycmVkRm9vdCwKICAgICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAicGxheWVyLnByZWZlcnJlZEZvb3QiCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBpZDogInByZWZlcnJlZC1mb290IiB9LAogICAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgJCRzZWxlY3RlZFZhbCA9IEFycmF5LnByb3RvdHlwZS5maWx0ZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jYWxsKCRldmVudC50YXJnZXQub3B0aW9ucywgZnVuY3Rpb24obykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gby5zZWxlY3RlZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24obykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsID0gIl92YWx1ZSIgaW4gbyA/IG8uX3ZhbHVlIDogby52YWx1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS4kc2V0KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnBsYXllciwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJwcmVmZXJyZWRGb290IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRldmVudC50YXJnZXQubXVsdGlwbGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAkJHNlbGVjdGVkVmFsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogJCRzZWxlY3RlZFZhbFswXQogICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgX2MoIm9wdGlvbiIsIFtfdm0uX3YoIlJJR0hUIildKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJvcHRpb24iLCBbX3ZtLl92KCJMRUZUIildKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJvcHRpb24iLCBbX3ZtLl92KCJCT1RIIildKQogICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAhX3ZtLnByZWZlcnJlZEZvb3RWYWxpZAogICAgICAgICAgICAgICAgPyBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJoZWxwIGlzLWRhbmdlciIgfSwgWwogICAgICAgICAgICAgICAgICAgIF92bS5fdigiIFBsZWFzZSBzZWxlY3QgdGhlIHByZWZlcnJlZCBmb290ICIpCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICA6IF92bS5fZSgpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiZGF0ZS1waWNrZXIiLCB7CiAgICAgICAgICAgICAgYXR0cnM6IHsgbGFiZWw6ICJEYXRlIG9mIGJpcnRoIiwgZGF0ZTogX3ZtLmRhdGUgfSwKICAgICAgICAgICAgICBvbjogeyBkYXRlQ2hhbmdlZDogX3ZtLnNldERhdGUgfQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogImZpZWxkIGlzLWdyb3VwZWQiIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoIkJ1dHRvbiIsIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAiaWNvbi1kYXRhIjogeyBpY29uOiAiZmFzIGZhLXRyYXNoLWFsdCIsIHBvc2l0aW9uOiAibGVmdCIgfSwKICAgICAgICAgICAgICAgICAgICAiY2xhc3MtbmFtZSI6ICJidXR0b24gaXMtY2VudGVyZWQgaXMtZGFuZ2VyIGlzLW91dGxpbmVkIgogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBvbjogeyBjbGlja2VkOiBfdm0ucmVtb3ZlUGxheWVyIH0KICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgX2MoIkJ1dHRvbiIsIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAiaWNvbi1kYXRhIjogeyBpY29uOiAiZmFyIGZhLXNhdmUiLCBwb3NpdGlvbjogImxlZnQiIH0sCiAgICAgICAgICAgICAgICAgICAgImNsYXNzLW5hbWUiOiAiYnV0dG9uIGlzLWNlbnRlcmVkIGlzLXByaW1hcnkgaXMtb3V0bGluZWQiLAogICAgICAgICAgICAgICAgICAgIHRleHQ6ICJTYXZlIgogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgIGNsaWNrZWQ6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5zdWJtaXRGb3JtKHRydWUpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgIF9jKCJCdXR0b24iLCB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgImljb24tZGF0YSI6IHsKICAgICAgICAgICAgICAgICAgICAgIGljb246ICJmYXMgZmEtYW5nbGUtZG91YmxlLXJpZ2h0IiwKICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAicmlnaHQiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAiY2xhc3MtbmFtZSI6ICJidXR0b24gaXMtY2VudGVyZWQgaXMtaW5mbyBpcy1vdXRsaW5lZCIsCiAgICAgICAgICAgICAgICAgICAgdGV4dDogIkFkZCBtb3JlIgogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBvbjogeyBjbGlja2VkOiBfdm0uc3VibWl0QW5kUmVzZXQgfQogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIDEKICAgICAgICAgICAgKQogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApCiAgICAgIF0pCiAgICBdLAogICAgMQogICkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gWwogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiaWNvbiBpcy1zbWFsbCBpcy1sZWZ0IiB9LCBbCiAgICAgIF9jKCJpIiwgeyBzdGF0aWNDbGFzczogImZhcyBmYS11c2VyIiB9KQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiaWNvbiBpcy1zbWFsbCBpcy1sZWZ0IiB9LCBbCiAgICAgIF9jKCJpIiwgeyBzdGF0aWNDbGFzczogImZhcyBmYS11c2VyIiB9KQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiaWNvbiBpcy1zbWFsbCBpcy1sZWZ0IiB9LCBbCiAgICAgIF9jKCJpIiwgeyBzdGF0aWNDbGFzczogImZhcyBmYS10c2hpcnQiIH0pCiAgICBdKQogIH0KXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}